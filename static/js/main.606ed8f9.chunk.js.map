{"version":3,"sources":["components/Timer.js","components/TimerDashboard.js","App.js","serviceWorker.js","index.js"],"names":["Timer","_ref","hours","minutes","seconds","react_default","a","createElement","TimerDashboard","state","isStarted","handleToggleTimer","_this","setState","handleResetTimer","saveStateToLocalStorage","localStorage","setItem","JSON","stringify","timerStr","getItem","timer","parse","this","_this2","interval","setInterval","window","addEventListener","bind","clearInterval","removeEventListener","class","onClick","Component","App","className","TimerDashboard_TimerDashboard","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEeA,EAAA,SAAAC,GAAiC,IAA9BC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,QAASC,EAAcH,EAAdG,QAChC,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACGL,EAAQ,GAAK,IAAMA,EAAQA,EAD9B,IAEGC,EAAU,GAAK,IAAMA,EAAUA,EAFlC,IAGGC,EAAU,GAAK,IAAMA,EAAUA,KCJnBI,6MACnBC,MAAQ,CACNP,MAAO,EACPC,QAAS,EACTC,QAAS,EACTM,WAAW,KA4CbC,kBAAoB,WAClBC,EAAKC,SAAS,CACZH,WAAYE,EAAKH,MAAMC,eAI3BI,iBAAmB,WACjBF,EAAKC,SAAS,CACZX,MAAO,EACPC,QAAS,EACTC,QAAS,OAIbW,wBAA0B,WACxBC,aAAaC,QACX,QACAC,KAAKC,UAAU,CACbjB,MAAOU,EAAKH,MAAMP,MAClBC,QAASS,EAAKH,MAAMN,QACpBC,QAASQ,EAAKH,MAAML,gGA5DxB,IAAMgB,EAAWJ,aAAaK,QAAQ,SACtC,GAAiB,OAAbD,EAAmB,CACrB,IAAME,EAAQJ,KAAKK,MAAMH,GACzBI,KAAKX,SAAS,CACZX,MAAOoB,EAAMpB,MACbC,QAASmB,EAAMnB,QACfC,QAASkB,EAAMlB,uDAKD,IAAAqB,EAAAD,KAClBA,KAAKE,SAAWC,YAAY,WACtBF,EAAKhB,MAAMC,YACc,KAAvBe,EAAKhB,MAAML,SACbqB,EAAKZ,SAAS,CAAEV,QAASsB,EAAKhB,MAAMN,QAAU,EAAGC,QAAS,IAE/B,KAAvBqB,EAAKhB,MAAMN,SACbsB,EAAKZ,SAAS,CAAEX,MAAOuB,EAAKhB,MAAMP,MAAQ,EAAGC,QAAS,KAGxDsB,EAAKZ,SAAS,CAAET,QAASqB,EAAKhB,MAAML,QAAU,MAGjD,KAEHwB,OAAOC,iBACL,eACAL,KAAKT,wBAAwBe,KAAKN,sDAKpCO,cAAcP,KAAKE,UACnBE,OAAOI,oBACL,eACAR,KAAKT,wBAAwBe,KAAKN,wCA8BpC,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACP,EAAD,CACEE,MAAOsB,KAAKf,MAAMP,MAClBC,QAASqB,KAAKf,MAAMN,QACpBC,QAASoB,KAAKf,MAAML,UAEtBC,EAAAC,EAAAC,cAAA,UAAQ0B,MAAM,wBAAwBC,QAASV,KAAKb,mBACjDa,KAAKf,MAAMC,UAAY,QAAU,SAEpCL,EAAAC,EAAAC,cAAA,UAAQ0B,MAAM,0BAA0BC,QAASV,KAAKV,kBAAtD,iBArFoCqB,aCW7BC,0LARX,OACE/B,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACbhC,EAAAC,EAAAC,cAAC+B,EAAD,cAJUH,cCOEI,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.606ed8f9.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default ({ hours, minutes, seconds }) => {\n  return (\n    <div>\n      <h1>\n        {hours < 10 ? \"0\" + hours : hours}:\n        {minutes < 10 ? \"0\" + minutes : minutes}:\n        {seconds < 10 ? \"0\" + seconds : seconds}\n      </h1>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\n\nimport Timer from \"./Timer\";\n\nexport default class TimerDashboard extends Component {\n  state = {\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    isStarted: false\n  };\n\n  componentWillMount() {\n    const timerStr = localStorage.getItem(\"timer\");\n    if (timerStr !== null) {\n      const timer = JSON.parse(timerStr);\n      this.setState({\n        hours: timer.hours,\n        minutes: timer.minutes,\n        seconds: timer.seconds\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      if (this.state.isStarted) {\n        if (this.state.seconds === 59) {\n          this.setState({ minutes: this.state.minutes + 1, seconds: 0 });\n\n          if (this.state.minutes === 59) {\n            this.setState({ hours: this.state.hours + 1, minutes: 0 });\n          }\n        } else {\n          this.setState({ seconds: this.state.seconds + 1 });\n        }\n      }\n    }, 1000);\n\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  handleToggleTimer = () => {\n    this.setState({\n      isStarted: !this.state.isStarted\n    });\n  };\n\n  handleResetTimer = () => {\n    this.setState({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    });\n  };\n\n  saveStateToLocalStorage = () => {\n    localStorage.setItem(\n      \"timer\",\n      JSON.stringify({\n        hours: this.state.hours,\n        minutes: this.state.minutes,\n        seconds: this.state.seconds\n      })\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <Timer\n          hours={this.state.hours}\n          minutes={this.state.minutes}\n          seconds={this.state.seconds}\n        />\n        <button class=\"button button_primary\" onClick={this.handleToggleTimer}>\n          {this.state.isStarted ? \"Pause\" : \"Start\"}\n        </button>\n        <button class=\"button button_secondary\" onClick={this.handleResetTimer}>Reset</button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport TimerDashboard from './components/TimerDashboard';\n\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TimerDashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}